/*
 *  This file is part of BlockWeb Builder.
 *
 *  BlockWeb Builder is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  BlockWeb Builder is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *   along with BlockWeb Builder.  If not, see <https://www.gnu.org/licenses/>.
 */

plugins {
    id "com.android.application"
}

def KEYSTOREPASSWORD = System.getenv('KEYSTOREPASSWORD')
def secretsPropertiesFile = file('../secrets.properties')
def secretsProperties = new Properties()

if (secretsPropertiesFile.exists()) {
    secretsProperties.load(new FileInputStream(secretsPropertiesFile))
}

def analytics = System.getenv("GOOGLE_ANALYTICS")
def analyticsEnabled = analytics != null
def useEnvForFirebase = false

if (analyticsEnabled) {
    useEnvForFirebase = true
} else if (secretsPropertiesFile.exists()) {
    if (secretsProperties.getProperty('useFirebase') != null) {
        analyticsEnabled = secretsProperties.getProperty('useFirebase') == "true"
        if (analyticsEnabled) {
            useEnvForFirebase = false
            analyticsEnabled = true
        }
    }
}

def signingEnabled = false
def keyStorePassword = ""

if (KEYSTOREPASSWORD != null) {
    keyStorePassword = KEYSTOREPASSWORD
    signingEnabled = true
} else if (secretsPropertiesFile.exists()) {
    if (secretsProperties.getProperty('KEYSTOREPASSWORD') != null) {
        keyStorePassword = secretsProperties.getProperty('KEYSTOREPASSWORD')
        signingEnabled = true
    }
}

if (analyticsEnabled) {
    apply plugin: "com.google.gms.google-services"
}

def localPropertiesFile = file('../local.properties')
def localProperties = new Properties()
def useLocalProperties = false

if (localPropertiesFile.exists()) {
    localProperties.load(new FileInputStream(localPropertiesFile))
    useLocalProperties = true
}

android {
    namespace 'com.block.web.builder'
    compileSdk 34
    buildToolsVersion "34.0.0"

    def getCommitHash = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "rev-parse", "--short", "HEAD"
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    def getCommitSha = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "git", "rev-parse", "HEAD"
            standardOutput = stdout
        }
        return "\"" + stdout.toString().trim() + "\""
    }

    defaultConfig {
        applicationId "com.block.web.builder"
        minSdk 21
        targetSdk 28
        compileSdkVersion 34
        versionCode 1
        versionName "1.0 Alpha01-Snapshot-" + getCommitHash()
        buildConfigField "String", "commitSha", getCommitSha()
        buildConfigField "boolean", "isRelease", "false"
        vectorDrawables { 
            useSupportLibrary true
        }
        if (useLocalProperties) {
            if (localProperties.getProperty('enableDeveloperBlocks') != null) {
                buildConfigField "boolean", "enableDeveloperBlocks", localProperties.getProperty('enableDeveloperBlocks')
            } else {
                buildConfigField "boolean", "enableDeveloperBlocks", "false"
            }
        } else {
            buildConfigField "boolean", "enableDeveloperBlocks", "false"
        }
    }

    signingConfigs {
        release {
            if (signingEnabled) {
                storeFile file("../keystore.jks")
                storePassword keyStorePassword
                keyAlias "BlockWebBuilder"
                keyPassword keyStorePassword
            }
        }
        debug {
            if (signingEnabled) {
                storeFile file("../keystore.jks")
                storePassword keyStorePassword
                keyAlias "BlockWebBuilder"
                keyPassword keyStorePassword
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }
}

dependencies {
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs_nio:2.0.2")

    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
    implementation "com.google.android.material:material:1.11.0"
    implementation "androidx.core:core-splashscreen:1.0.1"
    if (analyticsEnabled) {
        if (useEnvForFirebase) {
            new File("$projectDir/google-services.json").text = analytics;
        }
    }

    implementation "com.vanniktech:android-image-cropper:4.5.0"

    def editorGroupId = "io.github.Rosemoe.sora-editor"
    implementation platform("$editorGroupId:bom:0.23.4")
    implementation "$editorGroupId:editor"
    implementation "$editorGroupId:language-textmate"

    implementation 'org.nanohttpd:nanohttpd:2.3.0'

    implementation platform('com.google.firebase:firebase-bom:32.3.1')
    implementation 'com.google.firebase:firebase-analytics'

    implementation project(path:':common')
    implementation project(path:':editor')
    implementation project(path:':block:core')
}
